import React, { useState, useEffect, useContext } from "react";
import { useNavigate } from "react-router-dom";
import { AuthContext } from "../context/auth-context"; // –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

const Basket = () => {
    const { userId } = useContext(AuthContext); // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const [cart, setCart] = useState([]);
    const navigate = useNavigate();

    useEffect(() => {
        if (!userId) {
            console.error("–û—à–∏–±–∫–∞: userId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
            return;
        }

        const fetchCart = async () => {
            try {
                console.log("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è userId:", userId);
                const response = await fetch(`http://localhost:5000/api/cart/${userId}`);
                if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã");

                const data = await response.json();
                setCart(data);
            } catch (error) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã:", error);
            }
        };

        fetchCart();
    }, [userId]); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ userId

    const removeFromCart = async (productId) => {
        if (!userId) return;
        try {
            console.log(`üóë –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ${productId} –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            const response = await fetch("http://localhost:5000/api/cart/remove", {
                method: "DELETE",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ user_id: userId, product_id: productId }),
            });

            if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞");

            const data = await response.json();
            setCart(data);
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:", error);
        }
    };

    const updateQuantity = async (productId, change) => {
        if (!userId) return;
        try {
            console.log(`üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ ${productId} —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            const response = await fetch("http://localhost:5000/api/cart/update", {
                method: "PUT",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ user_id: userId, product_id: productId, change }),
            });

            if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞");

            const data = await response.json();
            setCart(data);
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:", error);
        }
    };

    const totalSum = cart.reduce((sum, product) => sum + product.price * product.quantity, 0);

    return (
        <div className="body-page">
            <div className="name">
                <label>–ö–æ—Ä–∑–∏–Ω–∞</label>
            </div>

            <div className="types">
                {cart.length === 0 ? (
                    <div className="type">
                        <div class="bold-text">
                            <label>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞</label>
                        </div>
                        <div class="black-text">
                            <label>–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–∏—Å–∫–æ–º –∏–ª–∏ –∫–∞—Ç–∞–ª–æ–≥–æ–º.</label>
                        </div>
                    </div>
                    
                    ) : (
                        cart.map((product) => (
                            <div className="type" key={product.ID}>
                                <div className="orange-title">
                                    <label>{product.name}</label>
                                </div>
                                <div className="black-title">
                                    <label>{product.price} &#8381;</label>
                                </div>
                                <div className="quantity-button">
                                    <button onClick={() => updateQuantity(product.ID, 1)}>+</button>
                                    <input type="text" value={product.quantity} readOnly />
                                    <button onClick={() => updateQuantity(product.ID, -1)}>-</button>
                                </div>
                                <div className="left-row">
                                    <div className="orange-button">
                                        <button onClick={() => navigate(`/product/${product.ID}`)}>–ü–µ—Ä–µ–π—Ç–∏</button>
                                    </div>
                                    <div className="add-button">
                                        <button onClick={() => removeFromCart(product.ID)}>&times;</button>
                                    </div>
                                </div>
                            </div>
                        ))
                )}
            </div>
            {cart.length > 0 && (
                <div>
                    <div className="basket-column">
                        <div className="delivery-column">
                            <div class="black-title">
                                <label>–û–±—â–∞—è —Å—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ</label>
                            </div>
                            <div class="black-text">
                                <label>{totalSum.toLocaleString()} &#8381;</label>
                            </div>
                        </div>
                        <div class="summary-column">
                            <div class="black-title">
                                <label>–û–±—â–∞—è —Å—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ</label>
                            </div>
                            <div class="black-text">
                                <label>{totalSum.toLocaleString()} &#8381;</label>
                            </div>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default Basket;
